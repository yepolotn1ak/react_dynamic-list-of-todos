{"version":3,"sources":["types/Status.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","getFilteredTodos/getFilteredTodos.ts","index.tsx"],"names":["Status","TodoList","React","memo","todos","onSelect","selectedTodoId","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","query","onChangeQuery","status","onChangeStatus","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","selectedTodo","useState","user","setUser","userId","useEffect","getUser","href","email","name","App","setTodos","loading","setLoading","setSelectedTodo","setQuery","setStatus","filteredTodos","filter","toLowerCase","includes","trim","getFilteredTodos","finally","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4f0cc74.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onSelect?: (todo: Todo | null) => void,\n  selectedTodoId?: number | undefined,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  onSelect = () => { },\n  selectedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': selectedTodoId === todo.id,\n            })}\n          >\n            <td className=\"is-vcentered\">\n              {todo.id}\n            </td>\n\n            {todo.completed ? (\n              <>\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              </>\n            ) : (\n              <td className=\"is-vcentered\" />\n            )}\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onSelect(todo)}\n              >\n                <span className=\"icon\">\n                  {selectedTodoId === todo.id ? (\n                    <i className=\"far fa-eye-slash\" />\n                  ) : (\n                    <i className=\"far fa-eye\" />\n                  )}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport { Status } from '../../types/Status';\n\ntype Props = {\n  query: string,\n  onChangeQuery: (query: string) => void,\n  status: Status,\n  onChangeStatus: (status: Status) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  query,\n  onChangeQuery = () => {},\n  status,\n  onChangeStatus = () => {},\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={event => onChangeStatus(event.target.value as Status)}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => onChangeQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onChangeQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  selectedTodo: Todo,\n  onSelect?: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onSelect = () => {},\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const {\n    id,\n    userId,\n    title,\n    completed,\n  } = selectedTodo;\n\n  useEffect(() => {\n    getUser(userId).then(setUser);\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onSelect(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={user.email}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Status } from './types/Status';\nimport { getFilteredTodos } from './getFilteredTodos/getFilteredTodos';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState<Status>(Status.All);\n  const filteredTodos = getFilteredTodos(todos, query, status);\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos()\n      .then(setTodos)\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onChangeQuery={setQuery}\n                status={status}\n                onChangeStatus={setStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && (\n                <Loader />\n              )}\n\n              {!loading && filteredTodos.length > 0 && (\n                <TodoList\n                  todos={filteredTodos}\n                  onSelect={setSelectedTodo}\n                  selectedTodoId={selectedTodo?.id}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onSelect={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport function getFilteredTodos(\n  todos: Todo[],\n  query: string,\n  status: Status,\n) {\n  return todos\n    .filter(todo => {\n      return todo.title.toLowerCase().includes(query.trim().toLowerCase());\n    })\n    .filter(({ completed }) => {\n      switch (status) {\n        case Status.Active:\n          return !completed;\n        case Status.Completed:\n          return completed;\n        default:\n          return true;\n      }\n    });\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}